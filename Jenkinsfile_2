pipeline {
    agent any

    stages {
        stage('Code_Checkout') {
            steps {
                echo 'Cloning the project from repo..'
                git 'https://github.com/sanjangithub/My_Quizapp_Jenkins.git'
                echo 'Cloning done.'
            }
        }
        stage('Update_Version') {
            steps {
                script {
                    // Read the current version from version.txt
                    def versionFile = readFile('version.txt').trim()
                    echo "Current Version: ${versionFile}"
                    
                    // Increment the version (Assuming it's in the format: X.Y)
                    def versionParts = versionFile.tokenize('.')
                    def newVersion = "${versionParts[0]}.${versionParts[1].toInteger() + 1}"
                    echo "New Version: ${newVersion}"
                    
                    // Write the new version back to version.txt
                    writeFile file: 'version.txt', text: newVersion
                    
                    // Make the new version available for other stages
                    env.NEW_VERSION = newVersion
                }
            }
        }
        stage('Commit_New_Version') {
            steps {
                script {
                    // Commit the updated version.txt back to the repository
                    sh 'git config user.email "jenkins@example.com"'
                    sh 'git config user.name "Jenkins"'
                    sh 'git add version.txt'
                    sh 'git commit -m "Update version to ${NEW_VERSION}"'
                    sh 'git push origin HEAD:main'
                }
            }
        }
        stage('Code_Build') {
            steps {
                echo 'Build started...'
                bat 'mvn clean compile'
                echo 'Build successful.'
            }
        }
        stage('Sonar_Scanning') {
            steps {
                echo 'Started sonar scanning on the project.'
                bat 'mvn clean verify sonar:sonar -Dsonar.projectKey=Quiz_sonar_Nexus -Dsonar.host.url=http://localhost:9000 -Dsonar.login=sqp_b5df1de9578c348689f838e3490914225b60c162'
                echo 'Sonar report generation is completed.'
            }
        }
        stage('Artifact_Generation') {
            steps {
                echo 'Started generating artifact...'
                bat 'mvn package'
                echo 'Artifact is generated.'
            }
        }
        stage('Artifact_NexusUploadation') {
            steps {
                echo 'Started uploading the artifact...'
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: 'localhost:8081',
                    groupId: 'com.sanjan',
                    version: "${env.NEW_VERSION}",
                    repository: 'Quizapp_Hitman',
                    credentialsId: 'Sj_Nexus',
                    artifacts: [
                        [artifactId: 'quizapp',
                         classifier: '',
                         file: "target/quizapp-${env.NEW_VERSION}.jar", 
                         type: 'jar']
                    ]
                )
                echo "Uploaded the artifact version ${env.NEW_VERSION} to Nexus artifact repo."
            }
        }
        stage('Email Notification') {
            steps {
                emailext body: """Hi Sanjan,

The build for quizapp has completed successfully with version ${env.NEW_VERSION}.
Please check the dashboard for detailed results.
Dashboard link - http://localhost:8080/job/Quizapp_Nex/

Best Regards,
Jenkins.""", 
                subject: "Quizapp Jenkins Build - SUCCESS (Version: ${env.NEW_VERSION})", 
                to: 'sanjan.chikkala@gmail.com'
            }
        }
    }
}
